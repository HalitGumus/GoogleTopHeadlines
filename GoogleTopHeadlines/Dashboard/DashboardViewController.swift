//
//  DashboardViewController.swift
//  GoogleTopHeadlines
//
//  Created by HalitG on 13.02.2021.
//  Copyright (c) 2021 HalitG. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DashboardDisplayLogic: class
{
  func load(articles: [Article])
}

class DashboardViewController: UIViewController, DashboardDisplayLogic
{
  var interactor: DashboardBusinessLogic?
  var router: (NSObjectProtocol & DashboardRoutingLogic & DashboardDataPassing)?

    var viewCollection: UICollectionView!
    
    var handlerLilNews = LilNewsHandler()
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = DashboardInteractor()
    let presenter = DashboardPresenter()
    let router = DashboardRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    configure()
    load()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func load()
  {
    let request = Dashboard.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func load(articles: [Article]) {
    updateVisibility()
    handlerLilNews.items = articles
    
    viewCollection.dataSource = handlerLilNews
    viewCollection.delegate = handlerLilNews
    
    viewCollection.reloadData()
  }
    
    func load(title thisTitle: String) {
        title = thisTitle
    }
    
    func updateVisibility() {
        viewCollection.isHidden = false

        viewCollection.isPagingEnabled = true
    }
}

private extension DashboardViewController {

    func configure() {
//        view.backgroundColor = .systemGray6
//        configureNavigation()
//        configureViewTable()
        configureViewCollection()
    }
    
    func configureViewCollection() {
        let identifiers = NewsViewModel.Style.allCases
            .filter { !$0.isTable }
            .flatMap { $0.identifiers }
        viewCollection = UICollectionView(frame: .zero, direction: .horizontal, identifiers: identifiers)
        viewCollection.register(LilNewsCell.self, forCellWithReuseIdentifier: "LilNewsCell")
        viewCollection.isHidden = true
        viewCollection.showsHorizontalScrollIndicator = false

        view.addSubviewForAutoLayout(viewCollection)
        NSLayoutConstraint.activate([
            viewCollection.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            viewCollection.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            viewCollection.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            viewCollection.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
    }
}
